/**
 * SHORTCODES.JS ‚Äî –ü–∞—Ä—Å–µ—Ä —à–æ—Ä—Ç–∫–æ–¥–æ–≤
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: [img:], [file:], [video:], [quiz:]
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å Modals.js –∏ Quizzes.js
 */

const Shortcodes = {
  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
  parse(content) {
    if (!content) return '';

    let processed = content;

    // –ü–∞—Ä—Å–∏–º Markdown
    processed = this.parseMarkdown(processed);

    // –ü–∞—Ä—Å–∏–º —à–æ—Ä—Ç–∫–æ–¥—ã
    processed = this.parseQuiz(processed);
    processed = this.parseVideo(processed);
    processed = this.parseFile(processed);
    processed = this.parseImage(processed);

    return processed;
  },

  // –ë–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä Markdown
  parseMarkdown(text) {
      // –ó–∞–≥–æ–ª–æ–≤–∫–∏
      text = text.replace(/^# (.*$)/gm, '<h1>$1</h1>');
      text = text.replace(/^## (.*$)/gm, '<h2>$1</h2>');
      text = text.replace(/^### (.*$)/gm, '<h3>$1</h3>');
      // –ñ–∏—Ä–Ω—ã–π –∏ –∫—É—Ä—Å–∏–≤
      text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
      text = text.replace(/\*(.*?)\*/g, '<em>$1</em>');
      // –°–ø–∏—Å–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
      text = text.replace(/^\* (.*$)/gm, '<li>$1</li>');
      text = text.replace(/(\n<li>.*<\/li>)+/g, (match) => `<ul>${match.replace(/\n/g, '')}</ul>`);
      // –ê–±–∑–∞—Ü—ã
      text = text.replace(/^\s*([^\n<#*].*)/gm, '<p>$1</p>');
      return text;
  },

  // –ü–∞—Ä—Å–∏–Ω–≥ [img:path/to/image.jpg]
  parseImage(text) {
    return text.replace(/\[img:([^\]]+)\]/g, (match, path) => {
      return `<figure class="figure">
                <img src="${path}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" class="img-fluid figure-img rounded" style="cursor: pointer;" onclick="Modals.openImage('${path}')">
                <figcaption class="figure-caption text-center"><small>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è</small></figcaption>
              </figure>`;
    });
  },

  // –ü–∞—Ä—Å–∏–Ω–≥ [file:path/to/document.pdf]
  parseFile(text) {
    return text.replace(/\[file:([^\]]+)\]/g, (match, path) => {
      const fileName = path.split('/').pop();
      const fileExt = fileName.split('.').pop().toLowerCase();
      const imageExtensions = ['png', 'jpg', 'jpeg', 'gif', 'svg', 'webp'];

      if (imageExtensions.includes(fileExt)) {
        return `<a href="#" class="btn btn-secondary" onclick="event.preventDefault(); Modals.openImage('${path}')">
          <i class="bi bi-image me-2"></i> –û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${fileName}
        </a>`;
      }

      return `<a href="#" class="btn btn-secondary" onclick="event.preventDefault(); Modals.openFile('${path}')">
        <i class="bi bi-file-earmark-text-fill me-2"></i> –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: ${fileName}
      </a>`;
    });
  },

  // –ü–∞—Ä—Å–∏–Ω–≥ [video:path/to/video.mp4]
  parseVideo(text) {
    return text.replace(/\[video:([^\]]+)\]/g, (match, path) => {
      const fileName = path.split('/').pop();
      return `<a href="#" class="btn btn-secondary" onclick="event.preventDefault(); Modals.openVideo('${path}')">
        üé¨ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤–∏–¥–µ–æ: ${fileName}
      </a>`;
    });
  },

  // –ü–∞—Ä—Å–∏–Ω–≥ [quiz:quiz-id]
  parseQuiz(text) {
    return text.replace(/\[quiz:([^\]]+)\]/g, (match, quizId) => {
      const quiz = Storage.getQuiz(quizId);
      return `<div class="card quiz-embed mb-3">
        <div class="card-body">
          <h5 class="card-title">–¢–µ—Å—Ç: ${quiz ? quiz.title : '–ù–µ –Ω–∞–π–¥–µ–Ω'}</h5>
          <p class="card-text text-muted">–ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞.</p>
          <a href="#" class="btn btn-primary" onclick="event.preventDefault(); Core.setView('quiz', { currentQuizId: '${quizId}', currentCourseId: Core.state.currentCourseId, currentLessonId: Core.state.currentLessonId })">
            –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
          </a>
        </div>
      </div>`;
    });
  }
};
